import time
import os
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from urllib.parse import quote
import multiprocessing
import shutil

project_path = os.getcwd()
session_folder_path = os.path.join(project_path, "session")

message = "ü´£"
encoded_message = quote(message.encode("utf-8"))

SECONDS_WAIT_FOR_USER_AUTHORIZADE = 300
WHATSAPP_URL = "https://web.whatsapp.com/"
MESSAGE_FOR_SPAM = "hi"
ENCODED_FOR_SPAM = quote(MESSAGE_FOR_SPAM.encode("utf-8"))


def clear_session_folder() -> bool:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ "session"
    if os.path.exists(session_folder_path):
        # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
        for filename in os.listdir(session_folder_path):
            file_path = os.path.join(session_folder_path, filename)
            try:
                if os.path.isfile(file_path):
                    os.unlink(file_path)
                elif os.path.isdir(file_path):
                    shutil.rmtree(file_path)  # —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏
            except Exception as e:
                print(f"[+] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file_path}. –í—ã–∑–≤–∞–Ω–æ: {e}")
                return False

        print("[+] –í—Å–µ —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã")
        return True

    else:
        print("[+] –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ session")
        return False


def is_authorized(driver) -> bool:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"""
    try:
        # –û–∂–∏–¥–∞–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Ç–µ–≥–∞ —Å id="wa_web_initial_startup"
        WebDriverWait(driver, SECONDS_WAIT_FOR_USER_AUTHORIZADE).until_not(
            EC.presence_of_element_located((By.ID, "wa_web_initial_startup")))
        time.sleep(7)
        if driver.current_url == WHATSAPP_URL:
            return True
        return False
    except Exception as ex:
        print(f"[+] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {ex}")
        return False
    finally:
        driver.quit()


def create_profile(num: int) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        profile = webdriver.ChromeOptions()
        profile.add_argument(f"user-data-dir={session_folder_path}/profile{num}")
        driver = webdriver.Chrome(options=profile)
        driver.get(WHATSAPP_URL)
        if not is_authorized(driver):
            raise
        print("[+] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω.")
    except Exception as ex:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {ex}")
    finally:
        driver.quit()


def append_profiles() -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è"""
    counter_profiles = len(os.listdir(session_folder_path))
    count_new_profiles = int(input("[+] –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª–µ–π : \n"))

    for i in range(counter_profiles + 1, counter_profiles + count_new_profiles + 1):
        create_profile(i)


def open_and_spam(name_profile: str, list_numbers: list) -> None:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏ –¥–µ–ª–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ list_numbers"""
    profile = webdriver.ChromeOptions()
    profile.add_argument(f"user-data-dir={session_folder_path}/{name_profile}")  # –ø—É—Ç—å –∫ –ø—Ä–æ—Ñ–∏–ª—é
    for number in list_numbers:
        try:
            driver = webdriver.Chrome(options=profile)
            send_msg_url = f"https://web.whatsapp.com/send?phone={number}&text={ENCODED_FOR_SPAM}"
            driver.get(send_msg_url)
            # –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            time.sleep(7)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–∂–∞—Ç–∏–µ–º enter
            webdriver.ActionChains(driver).send_keys(Keys.ENTER).perform()
            time.sleep(2)
            driver.quit()
        except Exception as ex:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –Ω–æ–º–µ—Ä: {number}. {ex}")


def numbers() -> list:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∏ –ø–∞—Ä—Å–∏—Ç –∏—Ö"""
    with open("target_numbers.txt", "r", encoding="utf8") as f:
        numbers_data = [i.strip() for i in f.readlines() if i != "\n"]
        return numbers_data


def get_number_for_spam(target_numbers: list, count_profiles: int) -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, –∏—Å—Ö–æ–¥—è –∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
    count_numbers_for_profile = len(target_numbers) // count_profiles
    cursor = 0
    while cursor < len(target_numbers):
        yield target_numbers[cursor:cursor + count_numbers_for_profile + 1]
        cursor += count_numbers_for_profile


def start_spam():
    data_targets = numbers()
    data_session = os.listdir(session_folder_path)
    if not len(data_targets):
        print("[+] –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–∞–π–ª target_numbers.")
        return -1
    if not len(data_session):
        print("[+] –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Å—Å–∏–∏.")
        return -1
    i = get_number_for_spam(data_targets, len(data_session))
    processes = []
    for session in data_session:
        p = multiprocessing.Process(target=open_and_spam, args=(session, next(i)))
        processes.append(p)
        p.start()

    for p in processes:
        p.join()
    else:
        print("[+] –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.")


def main() -> None:
    while True:
        action = input(
            f"""–ú–µ–Ω—é:
1. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.
2. –î–æ–±–∞–≤–∏—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º.
3. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ø–∞–º.\n""")
        if action not in {"1", "2", "3"}:
            print("[+] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏ 1-3")
            continue
        break

    if action == "1":
        clear_session_folder()
        append_profiles()
    elif action == "2":
        append_profiles()
    elif action == "3":
        start_spam()


if __name__ == "__main__":
    main()
